package edu.polytech.chap5_tp1;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
   /* Request param
    public @ResponseBody String addNewUser (@RequestParam String name, @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        User n = new User();
        n.setName(name);
        n.setEmail(email);
        userRepository.save(n);
        return "Saved";
    }*/

      // Post Request body data format json
       public @ResponseBody String addNewUser (@RequestBody User user) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        userRepository.save(user);
        return "Saved";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    //Get Request Param http://localhost:8080/demo/allByEmail?email=hassayounehanine@gmail.com Param(key,value)
    /*@GetMapping(path="/allByEmail")
    public @ResponseBody Iterable<User> getAllUsersByEmail(@RequestParam String email) {
        return userRepository.findAllByEmail(email);
    }*/

    //Get Path Variable http://localhost:8080/demo/allByEmail/hassayounehanine@gmail.com
    @GetMapping(path="/allByEmail/{email}")
    public @ResponseBody Iterable<User> getAllUsersByEmail(@PathVariable ("email") String email) {
        return userRepository.findAllByEmail(email);
    }


    // Get user by ID
    @GetMapping(path="get/{id}")
    public @ResponseBody User getUserById(@PathVariable Integer id) {
        return userRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("User not found with ID: " + id));
    }


    // get user by name (sans faire querry)
    @GetMapping(path="/{name}")
    public @ResponseBody Iterable<User> getUserByName(@PathVariable ("name") String name) {
        return userRepository.findUserByName(name);
    }


    @GetMapping(path="/nameEmail")
    public @ResponseBody Iterable<User> getUserByNameEmail(@RequestParam String name, @RequestParam String email) {
        return userRepository.findUserByNameAndEmail(name, email);
    }


    // Update user
    @PutMapping(path="/update/{id}")
    public @ResponseBody String updateUser(@RequestBody User updatedUser) {
        // Check if user exists
        userRepository.findById(updatedUser.getId())
                .orElseThrow(() -> new RuntimeException("User not found with ID: " + updatedUser.getId()));

        // Save the updated user
        userRepository.save(updatedUser);
        return "Updated";
    }

    // Supprimer un utilisateur par ID
    @DeleteMapping(path = "/delete/{id}")
    public @ResponseBody String deleteUser(@PathVariable Integer id) {
        if (userRepository.existsById(id)) {
            userRepository.deleteById(id);
            return "User deleted";
        } else {
            return "User not found";
        }
    }



}